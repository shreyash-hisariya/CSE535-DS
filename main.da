import LeaderElection.leader_election

#m_leader = import_da('leader')
import validator as m_validator
import bisect
import hashlib
import random
import pickle
def _calculate_id(key, m):
    h = int(hashlib.sha1(key.encode('utf-8')).hexdigest(), 16)
    id = h % (1 << m)
    return id
def _get_ledgers_for_validator(validator_index, ledger_ids_sorted, validator_ids_sorted, ledgers_by_id):
    #  distributed ledgers for each validator
    lo_id = validator_ids_sorted[validator_index - 1]
    hi_id = validator_ids_sorted[validator_index]

    lo = bisect.bisect_left(ledger_ids_sorted, lo_id)
    if validator_ids_sorted[validator_index - 1] == ledger_ids_sorted[lo]:
        lo += 1

    ledgers = {}
    if lo_id <= hi_id:
        i = lo
        while ledger_ids_sorted[i] <= hi_id:
            ledger_id = ledger_ids_sorted[i]
            ledgers[ledger_id] = ledgers_by_id[ledger_id]
            i += 1

    else:
        for i in range(lo, len(ledger_ids_sorted)):
            ledger_id = ledger_ids_sorted[i]
            ledgers[ledger_id] = ledgers_by_id[ledger_id]
        i = 0
        while ledger_ids_sorted[i] <= hi_id:
            ledger_id = ledger_ids_sorted[i]
            ledgers[ledger_id] = ledgers_by_id[ledger_id]
            i += 1

    return ledgers

def get_ledgers_array(filename):
    """
    Get ledgers from array
    :param filename: filename which to read. It must have 'name value' pairs seperated by space.
    :return: Return an array
    """
    ledgers = []
    with open(file=filename) as file:
        for ln in file.readlines():
            ledgers.append(tuple(ln.strip().split(' ')))

    return ledgers


def main():
    #ledgers = get_ledgers_array('data/ledgers.txt')
    ledgers = []
    n_validators = 4
    ledgers_by_id = {_calculate_id(ledger[0], n_validators): ledger for ledger in ledgers}
    ledger_ids_sorted = list(ledgers_by_id.keys())
    ledger_ids_sorted.sort()
    validator_ips = ['1.2.3.4', '4.5.6.7', '7.8.9.10', '10.11.12.13']
    validator_ips_by_id = {_calculate_id(validator_ip, n_validators): validator_ip for validator_ip in validator_ips}
    validator_ids_sorted = list(validator_ips_by_id.keys())
    validator_ids_sorted.sort()
    validator_process_ids = list(new(m_validator.Validator, num=len(validator_ids_sorted)))

    validator_descs = []
    for i in range(0, len(validator_ids_sorted)):
        id = validator_ids_sorted[i]
        process_id = validator_process_ids[i]
        ip = validator_ips_by_id[validator_ids_sorted[i]]
        validator_descs.append((id, process_id, ip))

    output(len(validator_descs))
    output(len(validator_ids_sorted))
    output('ledger_ids_sorted:', ledger_ids_sorted)
    output('validator_ids_sorted:', validator_ids_sorted)

    for i in range(0, len(validator_ids_sorted)):
        #ledgers = _get_ledgers_for_validator(i, ledger_ids_sorted, validator_ids_sorted, ledgers_by_id)
        setup(validator_process_ids[i], args=(validator_descs[i], n_validators))

    start(validator_process_ids)